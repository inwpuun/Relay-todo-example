directive @goField(
	forceResolver: Boolean
	name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(
	model: String
	models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
	name: String!
	description: String
	completed: Boolean
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
	studentID: String!
	firstNameTH: String!
	lastNameTH: String!
	firstNameEN: String!
	lastNameEN: String!
	nickname: String
	imageURL: String!
	email: String!
	createdAt: Time
	modifiedAt: Time!
	deletedAt: Time
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Mutation {
	createTodo(input: CreateTodoInput!): Todo
	updateTodo(input: UpdateTodoInput!, id: ID!): Todo
	deleteTodo(id: ID!): Boolean!
	createUser(input: CreateUserInput!): User
	updateUser(input: UpdateUserInput!, id: ID!): User
	deleteUser(id: ID!): Boolean!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
	"""
	The id of the object.
	"""
	id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
	"""
	Specifies an ascending order for a given `orderBy` argument.
	"""
	ASC

	"""
	Specifies a descending order for a given `orderBy` argument.
	"""
	DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!

	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!

	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: Cursor

	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: Cursor
}

type Query {
	"""
	Fetches an object given its ID.
	"""
	node(
		"""
		ID of the object.
		"""
		id: ID!
	): Node

	"""
	Lookup nodes by a list of IDs.
	"""
	nodes(
		"""
		The list of node IDs.
		"""
		ids: [ID!]!
	): [Node]!
	todos(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): TodoConnection!
	users(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int
	): UserConnection!
}

"""
The builtin Time type
"""
scalar Time

type Todo implements Node {
	id: ID!
	name: String!
	description: String
	completed: Boolean!
}

"""
A connection to a list of items.
"""
type TodoConnection {
	"""
	A list of edges.
	"""
	edges: [TodoEdge]

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!

	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}

"""
An edge in a connection.
"""
type TodoEdge {
	"""
	The item at the end of the edge.
	"""
	node: Todo

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}

"""
UpdateTodoInput is used for update Todo object.
Input was generated by ent.
"""
input UpdateTodoInput {
	name: String
	description: String
	clearDescription: Boolean
	completed: Boolean
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
	studentID: String
	firstNameTH: String
	lastNameTH: String
	firstNameEN: String
	lastNameEN: String
	nickname: String
	clearNickname: Boolean
	imageURL: String
	email: String
	createdAt: Time
	modifiedAt: Time
	deletedAt: Time
	clearDeletedAt: Boolean
}

type User implements Node {
	id: ID!
	studentID: String!
	firstNameTH: String!
	lastNameTH: String!
	firstNameEN: String!
	lastNameEN: String!
	nickname: String
	imageURL: String!
	email: String!
	createdAt: Time!
	modifiedAt: Time!
	deletedAt: Time
}

"""
A connection to a list of items.
"""
type UserConnection {
	"""
	A list of edges.
	"""
	edges: [UserEdge]

	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!

	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge.
	"""
	node: User

	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
